1. Introduction

1.1. Functional Dependency

E.g.

* X: Student registration (key attribute / determinant)
* Y: Student name (non-key attribute)

``if you see your reg number, you will always see your name''
``if you see your name, you will not always see your reg number''

``what determines what?''
That is, the determinant will always be unique and have attributes which may repeat

E.g.

* Invoice number determines invoice date

1.2. First Normal Form

* The intersection of each row and column only contain 1 value
* A cell in a table can only contain a single value
* Changing from unormalized to first normal:
	- Create new rows in table for repeating data
	- Move repeating data w/ copy of key attributes to new table

E.g.

* When a qualification column reads 'M.A, B.Sc.'
	- 1 string but 2 pieces of information

* Could have 2 rows for particular employee who has 2 qualifications
	- However, this repeats a lot of data and makes thier unique id reapeat - NO LONGER PRIMARY KEY
	- Therefore, must use multi primary key: emp_id AND qualification
	- Now normalised to first normal form

Or

* Could split {emp_id, emp_name} and {qualification, date} (+ emp_id)
	- emp_id never repeats in first table as primary key
	- emp_id only repeats as foreign key in second table
	- Therefore, first normal form as each cell contains unique value

2. Normalisation to Second Normal Form

``a non-key attribute must contain a fact about the key, the whole key and nothing but the key''

* Recall:
	- Non-key attribute: attribute not contained in any candidate key
	- Candidate key: any key of relation (inc. primary key)

E.g.

* Warehouse table - redundant data

	part_id		warehouse	quantity	address
	-------		---------	--------	-------
	P01		Gla North	7		123 Gla St
	P02		Gla North	2		123 Gla St
	P03		Gla South	3		123 Gla St

	- We have already been told where gla north is, dont need it twice
	- However, its not address which is reundant as need them to diff between gla north and south
	- Split into {part_id, warehouse, quantity} (PK: part_id, warehouse);
	- and {warehouse, address} (PK: warehouse)
	- Addresses stored only once

3. Normalisation to Third Normal Form

* Table is in 3NF if it is in 2NF and there are no `transitive' dependencies of any non-key attributes on the key
	- Transitive dependency: C depends transitively on A if there exists a B such that: A --> B, B --> C

E.g. a table in 1NF and 2NF:
	
	film_id		title		year		dir_id		name		nationality
	-------		-----		----		------		----		-----------
	001		123		2015		D01		Spielberg	USA
	002		XYZ		1984		D02		Hammer		UK
	003		ABC		1902		D01		Spielberg	USA

	- title, year depend on film_id
	- name, nationality depend on nationality
	- Therefore, transitive
