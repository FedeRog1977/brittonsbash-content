1. The Relational Model

1.1. Relation Schema

* FILM(Title, Release_Yr)

* Relation (Table Name) = 'FILM'
* Attribute (Column) = 'Title', 'Release_Yr'

* Relation Instance = table w/ multiple rows following Schema

* Tupe (Row) = 'Weird Science', '1985'
* Domain = all possible values of column, exclusing name
	- E.g. for a column MARITAL_STATUS, the doman may be 'married', 'divorced', ...

* N Rows = Cardinality
* N Columns = Degree

* Null = value of attibute is missing value 
	- not 0 or <empty>
	- Usually means data not appropriate or don't know

* Key = addressing tuples
* Superkey = combination of attributes in which no two tuples repeat values

* E.g.
	Title			Release_Yr
	Weird Science		1985
	The Breakfast Club	1984
	Sixteen Candles		1984		

	- Superkey = (Title, Title+Release_Yr)
	- Key = (Title) (but could be same named film in different years)

* Surrogate = attribute added to be the key (e.g. Film_ID)
* Candidate Keys = possibles keys for table = (Film_ID, Title)
* Primary Key = unique values = (Film_ID)

* Therefore, Relation Schema = FILM(\textunderline{Film_ID}, Title, Release_Yr)

1.2. Relationships

* E.g. relate each director to films they've directed
* Implement Primary Key (Dir_ID) from DIRECTOR as a Foreign Key (Dir_ID) in FILM

* How many instances of DIRECTOR are related to each instance of a FILM = ONE
	- `Each film can be directed by ONE director'
* How many instances of FILM are related to each instance of a DIRECTOR = MANY
	- `Each director can direct MANY films'

Integrity Constraints

* ENTITY INTEGRITY CONSTRAINT
* Primary Key must not contain Null values
	- Cannot identify row

* REFERENTIAL CONSTRAINT
* All values in Foreign Key column must also appear in an appropriate Primary Key column
	- Do not all have to appear when acting as a Foreign Key
	- E.g. if you remove director D2 from DIRECTOR, films in FILMS may have a problem

1.3. Relational Algebra

* RESTRICT, PROJECT, JOIN

* RESTRICT = \sigma = slicing horizontally
* E.g.
	- RECENT_FILMS \sigma Release_Yr > 1990 (FILM)
	- Make a new table for films more recent than 1990

* PROJECT = \pi = slicing vertically
* E.g.
	- RESULT \pi Title, Release_Yr (FILM)
	- Make a new table for films w/o particular columns

* JOIN (natural) = * = combining tuples from different tables based on common attributes
* E.g.
	- FILM_DIRECTOR FILM * DIRECTOR
	- Basically adding the director name next to the director ID in FILM table
	- However you may want to preserve unmatching rows...

* JOIN (outer) = <unknown_character> = same as above but preserve nulls
* E.g.
	- FILM_DIRECTOR FILM <unknown_character> DIRECTOR
	- This is a left outer join

* Conjoining E.g.
	- DIRECTOR_AND_TITLE \pi Title, Name (FILM * DIRECTOR)
	- Join to add director names
	- Project to only get film titles w/ mathcing director

1.4. Views

* You may want to slice horizontally and vertically, this is a `view'
* Users may not be interested in IDs, for example
