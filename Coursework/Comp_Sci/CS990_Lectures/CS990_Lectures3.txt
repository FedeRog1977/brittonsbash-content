1. Advanced Queries

* Nested queries

1.1. Sub Query

* E.g.

SELECT order_no, order_date
	FROM orders
	WHERE value > (
		SELECT AVG(value)
			FROM orders
	);

* Calculates avg. of value column, then;
* Retrieve each row on basis of value > avg. of value

1.2. Correlated Query

* E.g. print orders where value of that order is above average value of all order for single person

SELECT *
	FROM orders
	WHERE value > (
		SELECT AVG(value)
			FROM orders x				<-- renaming orders 'x' in sub query, as can't have same table in query
			WHERE orders.cust_no = x.cust_no
	);

1.3. Revisiting Joins

* Instead of:

SELECT DISTINCT cust_name
	FROM customer join orders
	ON customer.cust_no = orders.cust_no
	WHERE order_date > '12-AUG-20';

* Or:

SELECT cust_name
        FROM customer, orders
	WHERE customer.cust_no = orders.cust_no
	AND order_date > '12-AUG-20';

* Do:

SELECT cust_name
        FROM customer
	WHERE cust_no in (
		SELECT cust_no
			FROM orders
			WHERE order_date > '12-AUG-20'
	);

* Or:

SELECT cust_name
        FROM customer c
	WHERE EXISTS(
		SELECT *
			FROM orders
			WHERE c.cust_no = orders.cust_no
			AND order_date > '12-AUG-20'
	);

2. Creating Tables

2.1. Create Statement

CREATE TABLE horse (
	horse_no	VARCHAR(10)	<-- string of ASCII, up to 10 characters
	horse_name	VARCHAR(20)
	dob		DATE
	stire		VARCHAR(20)
	...
);

* Types
	- CHAR
	- NCHAR
	- VARCHAR2 and VARCHAR
	- NVARcHAR2
	- CLOB

	- NUMBER
	
	- BINARY_FLOAT / BINARY_DOUBLE
	- BLOB
	- BFILE
	- RAW / LONG_RAW

	- DATE

2.2. Insert Statement

* Not using some values:

INSERT ALL
	INTO horse(horse_no, horse_name, dob)
	(1, Federer, '8-AUG-1981')
	INTO horse(horse_no, horse_name, dob)
	(2, Nadal, '11-SEP-1987');

2.3. Integrity Constraint

* User intrgrity: the way in which an attribute behaves relative to values its given
* Entity integrity: e.g. the order date cannot be null
* Referential integrity: e.g. deleting customers from a customer table can leave customer information missing from orders

* E.g.
	- Primary Key: CONSTRAINT pk_<your_choice> PRIMARY KEY
	- Referencing: CONSTRAINT <your_choice> REFERENCES <tabel>(<attribute>)
	- User Integrity (e.g.): ... ( 
					CONSTRAINT no_null NOT NULL
					CONSTRAINT check_vl CHECK(VALUE > 0)
				     );
