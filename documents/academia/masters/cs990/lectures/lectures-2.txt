1. Logical Modelling

1.1. Design Rules

* Convert each entity to a table
	- Minimum N of tables
	- No null values

* E.g. BOOK and BORROWER
	- Relationship is ON LOAN however, create table and take domains from BOOK and BORROWER

	BOOK			ON_LOAN_TO		BORROWER

	NO.	TITLE		BOOK	BORROWER	NO.	NAME
	001	Abc		001	101		101	Bram
	002	123		002	102		102	Moolenaar

* E.g., or CAR <ASSIGNED TO> EMPLOYEE: 1:1
	- Could represent on 1 table as each car is assigned to an employee
	- Must choose ID for CAR or EMPLOYEE to be Primary Key, instead of both for 2 tables

* E.g., or CAR <ASSIGNED TO> EMPLOYEE: 1:1 (Optional)
	- All cars are assigned to employees but not all employees have cars assigned
	- If data is merged, there are null car fields for employees
	- Thus, create 2 tables; 1 for CAR and 1 for EMP
		- Use EMPLOYEE NO. domain as Foreign Key in CAR to show which employee had which car

* Decision Table:

			1:1				1:N				N:M
	-------------------------------------------------------------------------------------------------------------
	Oblig on none	New table for relationship.	New table for relationship.	New table for relationship.
			Identifiers as canditiade key.	Identifiers as candidate key.	Identifiers as candidate key.
	-------------------------------------------------------------------------------------------------------------
	Oblig on one	Identifier of non-oblig. to	New table for relationship.	N/A
			oblig table.			Identifiers as candidate key.
	-------------------------------------------------------------------------------------------------------------
	Oblig on N	N/A				Identifier of `one' table to	New table for relationship.
							`many' table.			Identifiers as candidate key.
	-------------------------------------------------------------------------------------------------------------
	Oblig on both	All attributes in one table.	Identifier of `one' table to	New table for relationship.
							`many' table.			Identifiers as candidate keys.

1.2. Design Decisions (Sub Types / Super Types)

* Situation where decision must be made (can't just use table above)

* E.g.
	- Supertype: PERSON
		- Subtype: STAFF
		- Subtype: STUDENT
			- Subtype: RESEARCH ASSISTANT

	- May create a table for all 4
		- Use PERSON Primary Key in STAFF and STUDENT as Foreign Key
		- Use STUDENT Primary Key in RESEARCH ASSISTANT as Foreign (Primary) Key 

	- Or, push data down the tree
		- Push relevant PERSON details down to STAFF and STUDENT
		- Push relevant STUDENT details down to RESEARCH ASSISTANT
		- However, people are now spread, not all contained in one table PERSON

	- Or, all data in single PERSON table
		- Some Student No.s will be NULL
		- Some Staff No.s will be NULL
		- Must add another attribute to indicate which type of person is present
			- I.e. 1 = STAFF, 2 = STUDENT, 3 = RESEARCH ASSISTANT
		- This could be reasonable if the data sample is small

1.3. Physical Database Design

* May need to:
	- Combine tables for faster access to data as less relationships
	- Split tables and choose indices and physical structures

2. SQL

* Not case sensitive in commands
* Case sensitive when searching for the value of a field
	- E.g. BOOK_NAME `Bram Goes to Hollywood', not `BRAM GOES TO HOLLYWOOD'

2.1. Restrict & Project

* SEE Lab 2 <Notes.txt>

2.2. Joins & Natural Joins

SELECT cust_no, cust_name, order_no, order_date
	FROM customer NATURAL JOIN "order"

	- Note, order has <""> so its not confused w/ the SQL command ORDER
	- Natural Join: Only see rows which have matching keys in each table
	- Matching values must be under matching headings and have same domain values
	- I.e.
		- cust_no: 001, 002, 003, etc. in both tables, not;
		- cust_no: 001, 002, 003, etc. and cust_num: 001, 002, 003, etc. in both tables

	- Recall, can also do: customer.cust_no = "order".cust_no

2.3. Functions

* SUM(), AVG(), MAX(), MIN(), STDEV(), VARIANCE(), COUNT(), *  (*, like in Linux, means all)

* E.g.

SELECT MAX(price)
	FROM part

2.4. Conditions

* DISTINCT, ANY(), IN(), BETWEEN(), LIKE()
* Limit w/ more than one option

* DISTINCT: only show results for 

* E.g.

SELECT DISTINCT cust_name
	FROM customer, order
	WHERE customer.cust_no = order.cust_no
	WHERE order_date = ANY('24/04/1984', '69/11/2011')

SELECT DISTINCT cust_name
	FROM customer, order 
	WHERE customer.cust_no = order.cust_no
	WHERE order_date = IN('24/04/1984', '69/11/2011')

---

SELECT DISTINCT cust_name
	FROM customer, order
	WHERE customer.cust_no = order.cust_no
	WHERE order_date BETWEEN '24/04/1984' AND '69/11/2011' 

SELECT DISTINCT cust_name
	FROM customer, order
	WHERE customer.cust_no = order.cust_no
	WHERE order_date BETWEEN '24/04/1984' AND '69/11/2011' 
	WHERE cust_name LIKE %ENT% (this will return names with 'ent' anywhere in the text)
