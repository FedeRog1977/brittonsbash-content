Lab1

Task 1

set pagesize 80
set linesize 55
set underline =
set space 5

column DNAME heading 'DEPARTMENT NAME' format A15
column DEPTNO heading 'DEPARTMENT NUMBER'
column LOC heading LOCATION

ttitle center 'Department Locations' skip 3

select DNAME, DEPTNO, LOC from dept;

Lab 2

Task 1

Existing:

* Model
	- model_no
	- make_name
	- model_name
	- year_start
	- year_finish
	- service_interval
	- length
	- width
* Derivative
	- deriv_no
	- model_no
	- deriv_name
	- doors
	- body
	- auto
	- pas
	- ig_min
	- ig_max
* Year_Price
	- deriv_no
	- year
	- regi
	- new
	- a1
	- good
	- fair
	- trade

Missing:

* Engine Size (l) (included <Deriv_Name>)
* Engine Power (Cyclinders)
* Engine Power (cc)
* Range
* Turbo (Y/N)
* Rear Seatbelts (Y/N)
* Add. Foglamps (Y/N)
* Passenger Mirror (Y/N)

Task 2

* See contents

DESCRIBE model
DESCRIBE derivative
DESCRIBE year_price

* Display table:

@lab21

* Original lab21.sql:

SELECT model_no, deriv_name, body, doors, auto
	FROM derivative
	WHERE model_no = 'm2';

* Modify lab21.sql in vim:

SELECT deriv_name, ig_max, ig_min, pas
	FROM derivative
	WHERE model_no > 'm2';

Task 3

* List make name, model name, first yr produced, last yr produced (on non-new models)
* Save to lab22.sql

SELECT make_name, model_name, year_start, year_finish
	FROM model
	WHERE year_start < 2004
		OR make_name = 'Audi';

Task 4

* Display table:

@lab23

* List make name, model name, w/ length > 15 and width > 5.5, or produced < 2000
* Save to lab24.sql

SELECT make_name, model_name
	FROM model
	WHERE (length > 15 AND width > 5)
		OR year_start < 2000;

Task 5

* Display table:

@lab25

* List make name, model name, w/ auto transmission

SELECT make_name, model_name
	FROM model, derivative
	WHERE model.model_no = derivative.model_no
		AND auto = 'Y';

* Format columns
* List derivative name and range of prices, w/ 51 plates

COLUMN new FORMAT 99,999.00
COLUMN good FORMAT 99,999.00
COLUMN fair FORMAT 99,999.00
COLUMN trade FORMAT 99,999.00

SELECT deriv_name, regi, new, good, fair, trade
	FROM derivative, year_price
	WHERE derivative.deriv_no = year_price.deriv_no
		AND regi = '51';

Task 6

* Format column
* List model name, derivative name, w/ 51 plates, trade > 4000

SELECT  make_name, model_name, deriv_name, new, a1
        FROM    model, derivative, year_price
        WHERE   year_price.deriv_no = derivative.deriv_no
        AND     model.model_no = derivative.model_no
        AND     regi = '53';

COLUMN trade FORMAT 99,999.00

SELECT make_name, model_name, deriv_name, regi, trade
	FROM model, derivative, year_price
	WHERE model.model_no = derivative.model_no
		AND derivative.deriv_no = year_price.deriv_no
		AND regi = '51'
		AND trade > 4000;

Task 7

* List w/ ORDER BY function

SELECT deriv_name, body, ig_min, ig_max
	FROM derivative
	ORDER BY deriv_name;

Task 8

* List w/ GROUP BY function
	- E.g. SUM, COUNT, MIN, MAX, etc.
* Example contained in lab210.sql
* Using lab211.sql, describe the English...

SELECT ig_max, max(a1), min(a1)
        FROM derivative, year_price
        WHERE derivative.deriv_no = year_price.deriv_no
        GROUP BY ig_max;

* ``As usual, selections are made FROM the derivative and year_price tables; WHERE the respective primary and foreign keys deriv_no are equal.''
* ``GROUP rows BY max insurance group values which and display corresponding maximum and minimum a1 prices.''

Task 9

* Format columns
* Alter lab213.sql using HAVING to restrict a1 price to > 8000, < 10000

COLUMN regi FORMAT A4
COLUMN avg(new) FORMAT 99,999.00
COLUMN avg(a1) FORMAT 99,999.00
COLUMN avg(good) FORMAT 99,999.00
COLUMN avg(fair) FORMAT 99,999.00
COLUMN avg(trade) FORMAT 99,999.00

SELECT regi, avg(new), avg(a1), avg(good), avg(fair), avg(trade)
        FROM year_price, derivative, model
        WHERE year_price.deriv_no = derivative.deriv_no
        	AND model.model_no = derivative.model_no
        	AND make_name = 'Audi'
        	AND model_name = 'A4'
        GROUP BY regi
	HAVING avg(a1) > 8000
		AND avg(a1) < 10000;

Assessment Task 1

SET pagesize 100
SET linesize 100
SET space 1

SELECT model_no, make_name, model_name, year_start, year_finish, service_interval
        FROM model;

Assessment Task 2

SET pagesize 100
SET linesize 100
SET space 1

SELECT ig_min, ig_max, model_name, deriv_name
	FROM model, derivative
	WHERE model.model_no = derivative.model_no
		AND (make_name = 'Audi' OR make_name = 'New Audi')
		AND auto = 'N'
		AND ig_max > 6
	ORDER BY ig_min;

Assessment Task 3

COLUMN trade FORMAT 99,999.00

SELECT trade
	FROM model, derivative, year_price
	WHERE model.model_no = derivative.model_no
		AND derivative.deriv_no = year_price.deriv_no
		AND make_name = 'Audi'
		AND deriv_name = 'Quattro'
		AND regi = '53';

Assessment Task 4

* Line 1: same (selecting attributes)
* Line 2: same (selecting tables)
* Line 3: same (matching primary and foreign keys)
* Line 4: same (matching primary and foreign keys)
* Line 5: same (selecting make name 'Audi')
* Line 6: same (selecting model name 'A4')

* (i) Line 7: grouping the rows by the registration values;
* (i) Line 8: where the average a1 price is between 10000 and 20000

* (ii) Line 7: where a1 price is greater than 10000;
* (ii) Line 8: and a1 price is less than 20000;
* (ii) Line 9: group rows by the registration values

Thus, (i) groups registrations with average prices in a range; where (ii) groups registrations with a different set of average prices as prices have been restriced already, in a range.

Lab 3

Task 1: Creating Tables

* CREATE

CREATE TABLE team (
        TNO	NUMBER (2),
        TNA	CHAR (20),
        GRP	CHAR (1)
);

* When table created, added to Oracle dictionary; collection of all tables in database
* To display:

SELECT owner, table_name
	FROM all_tables;

* DROP

DROP TABLE team;

Task 2: Creating The Database

* 2018 Russian World Cup
* Create TEAM, GAME tables

CREATE TABLE team (
        TNO             NUMBER (2) CONSTRAINT PK_TEAM PRIMARY KEY,
        TNA             CHAR (20),
        GRP             CHAR (1)
);

CREATE TABLE game (
        GNO             NUMBER CONSTRAINT PK_GAME PRIMARY KEY,
        GAME_DATE       DATE,
        TEAM_1          NUMBER (2) CONSTRAINT REF_GAME_1 REFERENCES TEAM(TNO),
        TEAM_1_GOALS    NUMBER (2),
        TEAM_2          NUMBER (2) CONSTRAINT REF_GAME_2 REFERENCES TEAM(TNO),
        TEAM_2_GOALS    NUMBER (2),
        ROUND           CHAR (7)
);

Task 3: Populating The Database

* Insert data into team table, INSERT

INSERT INTO team values(1,'Angola','D');
INSERT INTO team values(10,'France','G');
INSERT INTO team values(11,'Germany','B');
... etc.

* Check records:

COLUMN grp FORMAT a3

SELECT tno, tna, grp
	FROM team;

* Insert data into game table, INSERT

insert into game values(1,'09-Jun-18',11,4,5,2,'first');
insert into game values(2,'09-Jun-18',20,0,8,2,'first');
insert into game values(3,'10-Jun-18',9,1,19,0,'first');
... etc.

Task 4: Creating Indices

create index t1index on game (team_1);
create index t2index on game (team_2);

* Check constraint on TNO:

INSERT INTO game values(25,'07-JUN-18',99,9,99,9,'first');

* Won't accept values

Task 5: Updating Records

* The following chnages Germany (team 1 in game 17) from group A to group B

UPDATE team
	SET grp = 'A'
	WHERE tno = (
		SELECT team_1
			FROM game
			WHERE gno = 17
		);

* Retrieving rows using the basic method

SELECT game.*
	FROM game, team
	WHERE tno = team_2
		AND tna like 'Ang%'
		AND game_date = '16-JUN-18';

* Updating the fitba record

UPDATE game
	SET team_1_goals = 0
	WHERE gno = 23
	AND game_date = '16-JUN-18'
	AND team_1 = 17;

UPDATE game
        SET team_2_goals = 0
        WHERE gno = 23
        AND game_date = '16-JUN-18'
        AND team_2 = 1;

Task 6: Deleting Records/Rows

* Deleting a non-existent Italy-Brazil game

DELETE from game
	WHERE team_1 = (
		SELECT tno
			FROM team
			WHERE tna like 'Ita%'
	)
	AND team_2 = (
		SELECT tno
			FROM team
			WHERE tna like 'Bra%'
	);

Task 7: Altering Table Structure

* E.g. adding column

ALTER TABLE team
        ADD (
		manager_name	CHAR(20)
	);

* Check that is contains NULL values

SELECT manager_name
	FROM team;

* Update

UPDATE team
	SET manager_name = 'Jose Pekerman'
	WHERE tna = 'Argentina';

Task 8: Views

* Logical table w/ no data but extracts data from underlying tables

CREATE VIEW t1_groupA AS
	SELECT tna, game_date, team_1_goals, team_2, team_2_goals
	FROM team, game
	WHERE tno = team_1
	AND grp = 'A'
	AND round = 'first';

* Can be used as a table if it contains data
* Retrieve details of games from after 9-JUN-18

SELECT *
	FROM t1_groupA
	WHERE game_date > '9-JUN-18';

* Create many-a-view

DROP VIEW played;
DROP VIEW wv;
DROP VIEW lv;
DROP VIEW dv;
DROP VIEW gv;
DROP VIEW final_tables;
DROP VIEW goals_scored;

CREATE VIEW played AS
	SELECT tna, count(*) p
	FROM team, game
	WHERE (tno = team_1
		OR tno = team_2)
	AND round = 'first'
	GROUP by tna;

CREATE VIEW wv AS
	SELECT tna, count(*) w , count(*) * 3 wpts
	FROM team, game
	WHERE ((tno = team_1
	AND team_1_goals > team_2_goals)
		OR (tno = team_2
	AND team_2_goals > team_1_goals))
	AND round = 'first'
	GROUP by tna;

CREATE VIEW dv AS
	SELECT tna, count(*) d , count(*) * 1 dpts
	FROM team, game
	WHERE ((tno = team_1
	AND team_1_goals = team_2_goals)
		OR (tno = team_2
	AND team_2_goals = team_1_goals))
	AND round = 'first'
	GROUP by tna;

CREATE VIEW lv AS
	SELECT tna, count(*) l , count(*) * 0 lpts
	FROM team, game
	WHERE ((tno = team_1
	AND team_1_goals < team_2_goals)
		OR (tno = team_2
	AND team_2_goals < team_1_goals))
	AND round = 'first'
	GROUP by tna;

CREATE VIEW goals_scored AS
	SELECT tna, game_date, team_1_goals f, team_2_goals a
	FROM team, game
	WHERE tno = team_1 and round = 'first'
	UNION
	SELECT tna,game_date ,team_2_goals f, team_1_goals a
	FROM team, game
	WHERE tno = team_2 and round = 'first';

CREATE VIEW gv AS
	SELECT tna, sum(f) f, sum(a) a from goals_scored group by tna;

CREATE VIEW final_tables AS
	SELECT played.tna, p, nvl(w, 0) w, nvl(d,0) d, nvl( l, 0) l, nvl(f,0) f, nvl (a,0) a, ( nvl(wpts,0)+nvl(dpts,0)) pts, grp
	FROM played, wv, dv, lv, gv, team
	WHERE played.tna = wv.tna (+)
	AND played.tna = dv.tna (+)
	AND played.tna = lv.tna (+)
	AND played.tna = gv.tna (+)
	AND played.tna = team.tna;

* Query for group E final table in descending points order

SET pagesize 150
SET linesize 150
SET space 1

SELECT * from final_tables
	WHERE grp = 'E'
	ORDER BY pts DESC;

* Query for group C final table in descending points order and goal difference order

SELECT * from final_tables
	WHERE grp = 'C'
	ORDER BY pts DESC, (f - a) DESC;

-----------------
Lewis Britton
-----------------
Assessment Task 1
-----------------

* Alter game table for gate size, half-time score, referee

ALTER TABLE game 
        ADD (
                gate_size	NUMBER(6),
        	team_1_goals_ht	NUMBER (2),
        	team_2_goals_ht	NUMBER (2),
		referee		CHAR(12)
        );

-----------------
Assessment Task 2
-----------------

* Create tables

CREATE TABLE scorer (
	player_id	NUMBER(2) CONSTRINT PK_ID PRIMARY KEY,
	player_name	VARCHAR(12)
);

CREATE TABLE goal (
	gno 		NUMBER CONSTRAINT game_ref REFERENCES game(gno),
	player_id	NUMBER(2) CONSTRAINT scorer_ref REFERENCES scorer(player_id),
	tno		NUMBER(2) CONSTRAINT team_ref REFERENCES team(tno),
	time		DATE
);

* Insert data

INSERT INTO scorer values(1,'Federer');
INSERT INTO scorer values(2,'Nadal');
INSERT INTO scorer values(3,'Moolenaar');
INSERT INTO scorer values(4,'Chad');
INSERT INTO scorer values(5,'GigaChad');
INSERT INTO scorer values(6,'PetaChad');

INSERT INTO goal values(17,1,27,to_date('12 26','HH24 MI'));
INSERT INTO goal values(23,1,27,to_date('13 32','HH24 MI'));
INSERT INTO goal values(17,2,27,to_date('16 14','HH24 MI'));
INSERT INTO goal values(21,3,25,to_date('11 33','HH24 MI'));

* Results:

PLAYER_ID PLAYER_NAME
---------- ------------
	 1 Federer
	 2 Nadal
	 3 Moolenaar
	 4 Chad
	 5 GigaChad
	 6 PetaChad

       GNO  PLAYER_ID	     TNO TIME
---------- ---------- ---------- ---------
	17	    1	      27 01-FEB-22
	23	    1	      27 01-FEB-22
	17	    2	      27 01-FEB-22
	21	    3	      25 01-FEB-22

---------------------
Assessment Task 3 (a)
---------------------

* Check times are right

COLUMN goal_time FORMAT a10;

SELECT gno, player_id, tno, to_char(time,'HH24 MI')goal_time
	FROM goal;

* Results (a) w/ alias:

      GNO  PLAYER_ID	     TNO GOAL_TIME
---------- ---------- ---------- ----------
	17	    1	      27 12 26
	23	    1	      27 13 32
	17	    2	      27 16 14
	21	    3	      25 11 33

COLUMN goal_time FORMAT a10;

SELECT gno, player_id, tno, to_char(time,'HH24 MI')
	FROM goal;

* Results (a) w/o alias:

       GNO  PLAYER_ID	     TNO TO_CH
---------- ---------- ---------- -----
	17	    1	      27 12 26
	23	    1	      27 13 32
	17	    2	      27 16 14
	21	    3	      25 11 33

* Therefore, without the alias, the column title is defaulted to 'to_ch' for the to character command

---------------------
Assessment Task 3 (b)
---------------------

* The column statement formats the max character length of the time column
* It is only valid with the alias as it references the column as 'goal_time', 'time' as used when defining the table
* It is relevant to the 'goal_time' title as it is 9 characters long

-----------------
Assessment Task 4
-----------------

* Check printing of game date, goal time, player name; for game 17 (should be 2)

COLUMN goal_time FORMAT a10;

SELECT game_date, to_char(time,'HH24 MI')goal_time, player_name
	FROM game, scorer, goal
	WHERE game.gno = goal.gno
	AND scorer.player_id = goal.player_id
	AND game.gno = 17;

* Results:

GAME_DATE GOAL_TIME  PLAYER_NAME
--------- ---------- ------------
14-JUN-18 12 26      Federer
14-JUN-18 16 14      Nadal

